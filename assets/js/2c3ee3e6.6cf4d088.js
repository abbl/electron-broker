"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[254],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return o}});var r=n(7294);function o(e){var t=e.children,n=e.hidden,o=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(7462),o=n(7294),a=n(2389),i=n(3725),l=n(6010),s="tabItem_LplD";function c(e){var t,n,a,c=e.lazy,p=e.block,u=e.defaultValue,m=e.values,d=e.groupId,k=e.className,b=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.lx)(f,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===u?u:null!=(t=null!=u?u:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=b[0])?void 0:a.props.value;if(null!==v&&!f.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,i.UB)(),h=y.tabGroupChoices,C=y.setTabGroupChoices,j=(0,o.useState)(v),T=j[0],w=j[1],I=[],N=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var x=h[d];null!=x&&x!==T&&f.some((function(e){return e.value===x}))&&w(x)}var B=function(e){var t=e.currentTarget,n=I.indexOf(t),r=f[n].value;r!==T&&(N(t),w(r),null!=d&&C(d,r))},M=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=I.indexOf(e.currentTarget)+1;n=I[r]||I[0];break;case"ArrowLeft":var o=I.indexOf(e.currentTarget)-1;n=I[o]||I[I.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},k)},f.map((function(e){var t=e.value,n=e.label,a=e.attributes;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return I.push(e)},onKeyDown:M,onFocus:B,onClick:B},a,{className:(0,l.Z)("tabs__item",s,null==a?void 0:a.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),c?(0,o.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function p(e){var t=(0,a.Z)();return o.createElement(c,(0,r.Z)({key:String(t)},e))}},6002:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return b},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=n(9877),l=n(8215),s=["components"],c={sidebar_position:4},p="Dependency Injection",u={unversionedId:"usage/dependency-injection",id:"usage/dependency-injection",title:"Dependency Injection",description:"Introduction",source:"@site/docs/usage/dependency-injection.mdx",sourceDirName:"usage",slug:"/usage/dependency-injection",permalink:"/electron-broker/docs/usage/dependency-injection",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/dependency-injection.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/electron-broker/docs/usage/middleware"}},m={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Setup",id:"setup",level:2},{value:"Binding controllers",id:"binding-controllers",level:2},{value:"Binding middleware",id:"binding-middleware",level:2},{value:"Accesing BrokerClient",id:"accesing-brokerclient",level:2},{value:"Custom container",id:"custom-container",level:2}],k={toc:d};function b(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-injection"},"Dependency Injection"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Dependency injection is a design pattern, that moves the building of object dependencies out of its scope,\nand provides them by injecting them through many means (e.g by passing them in constructor) and freeing the object\nfrom manually building its dependencies. Therefore, achieving ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Separation_of_concerns"},"separation of concerns"),',\nas said object doesn\'t need to "know" how its dependencies are built.'),(0,a.kt)("p",null,"The broker internally uses the IoC container from the ",(0,a.kt)("inlineCode",{parentName:"p"},"InversifyJS")," package, to manage its dependencies.\nCurrently, it's the only container it works out of a box with, but in the future, it might support\nall major javascript DI libraries. But it's possible to use different containers,\nsee the ",(0,a.kt)("a",{parentName:"p",href:"#custom-container"},"custom container")," section."),(0,a.kt)("p",null,"The use of it is completely optional, if you want to manually build your classes, you're free to\nskip this part of the documentation."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To find out more about the ",(0,a.kt)("inlineCode",{parentName:"p"},"InversifyJS"),", head to its ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/inversify/InversifyJS"},"documentation"),"."))),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Make sure to install ",(0,a.kt)("inlineCode",{parentName:"p"},"InversifyJS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"reflect-metadata")," packages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install inversify reflect-metadata \n")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"To make Inversify automatically resolve dependencies between our objects, let's set the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoBindInjectable"),"\nproperty to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", and pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"container")," object to broker options. "),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import { BrokerFactory, Broker } from 'electron-broker';\nimport { Container } from 'inversify';\nimport 'reflect-metadata';\n\nconst container: Container = new Container({\n  autoBindInjectable: true,\n})\n\nlet broker: Broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n  });\n\n  broker.start();\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="index.ts"',title:'"index.ts"'},"import { BrokerFactory, Broker } from 'electron-broker';\nimport { Container } from 'inversify';\nimport 'reflect-metadata';\n\nconst container = new Container({\n  autoBindInjectable: true,\n})\n\nlet broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n  });\n\n  broker.start();\n}\n")))),(0,a.kt)("h2",{id:"binding-controllers"},"Binding controllers"),(0,a.kt)("p",null,"Mark the controller with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable()")," decorator, to make it resolvable by the container."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4} title="cats.controller.ts"',"{4}":!0,title:'"cats.controller.ts"'},"import { Injectable } from 'inversify';\nimport { Controller, MessagePattern } from 'electron-broker';\n\n@Injectable()\n@Controller('cats')\nexport default class CatsController {\n  @MessagePattern('get-breeds')\n  public getBreeds(): string[] {\n    return [\"Persian\", \"Maine Coon\", \"Sphynx\"];\n  }\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'{4} title="cats.controller.js"',"{4}":!0,title:'"cats.controller.js"'},"import { Injectable } from 'inversify';\nimport { Controller, MessagePattern } from 'electron-broker';\n\n@Injectable()\n@Controller('cats')\nexport default class CatsController {\n  @MessagePattern('get-breeds')\n  public getBreeds() {\n    return [\"Persian\", \"Maine Coon\", \"Sphynx\"];\n  }\n}\n")))),(0,a.kt)("p",null,"And provide the controller class reference to ",(0,a.kt)("inlineCode",{parentName:"p"},"controllers")," to broker settings. When you provide the broker\nwith controller class definition, it will attempt to resolve it within the container and will throw an error\nif fails to do so. "),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{9} title="index.js"',"{9}":!0,title:'"index.js"'},"import 'reflect-metadata';\nimport { BrokerFactory } from 'electron-broker';\nimport { Container } from 'inversify';\nimport CatsController from './cats.controller.js';\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n    controllers: [CatsController]\n  });\n\n  broker.start();\n}\n\ncreateBroker();\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'{9} title="index.js"',"{9}":!0,title:'"index.js"'},"import 'reflect-metadata';\nimport { BrokerFactory } from 'electron-broker';\nimport { Container } from 'inversify';\nimport CatsController from './cats.controller.js';\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n    controllers: [CatsController]\n  });\n\n  broker.start();\n}\n\ncreateBroker();\n")))),(0,a.kt)("h2",{id:"binding-middleware"},"Binding middleware"),(0,a.kt)("p",null,"Mark the Middleware with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable()")," decorator, to make it resolvable by the container."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4} title="message-logger.middleware.ts"',"{4}":!0,title:'"message-logger.middleware.ts"'},"import { Middleware } from 'electron-broker';\nimport { Injectable } from 'inversify';\n\n@Injectable()\nexport class MessageLoggerMiddleware implements Middleware {\n  public onRequest(context: ExecutionContext) {\n    const { eventId } = context.brokerEvent;\n\n    console.log(`[LOG] Received message with eventId: ${eventId}`)    \n  }\n\n  public onResponse(context: ExecutionContext) {\n    const { eventId } = context.brokerEvent;\n\n    console.log(`[LOG] Sent message with eventId: ${eventId}`)    \n  }\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4} title="message-logger.middleware.js"',"{4}":!0,title:'"message-logger.middleware.js"'},"import { Middleware } from 'electron-broker';\nimport { Injectable } from 'inversify';\n\n@Injectable()\nexport class MessageLoggerMiddleware {\n  public onRequest(context) {\n    const { eventId } = context.brokerEvent;\n\n    console.log(`[LOG] Received message with eventId: ${eventId}`)    \n  }\n\n  public onResponse(context) {\n    const { eventId } = context.brokerEvent;\n\n    console.log(`[LOG] Sent message with eventId: ${eventId}`)    \n  }\n}\n")))),(0,a.kt)("p",null,"And pass the middleware class reference to ",(0,a.kt)("inlineCode",{parentName:"p"},"UseMiddleware()")," decorator. If the broker fails to resolve the reference\nwithin its container, it will throw an error."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{9} title="ping.controller.ts"',"{9}":!0,title:'"ping.controller.ts"'},"import { Controller, MessagePattern } from 'electron-broker';\nimport { Injectable } from 'inversify';\nimport { MessageLoggerMiddleware } from './message-logger.middleware.ts'\n\n@Controller()\n@Injectable()\nexport default class PingPongController {\n  @MessagePattern('ping')\n  @UseMiddleware([MessageLoggerMiddleware])\n  public getPong(): string {\n    return \"pong\";\n  }\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{9} title="ping.controller.js"',"{9}":!0,title:'"ping.controller.js"'},"import { Controller, MessagePattern } from 'electron-broker';\nimport { Injectable } from 'inversify';\nimport { MessageLoggerMiddleware } from './message-logger.middleware.js'\n\n@Controller()\n@Injectable()\nexport default class PingPongController {\n  @MessagePattern('ping')\n  @UseMiddleware([MessageLoggerMiddleware])\n  public getPong() {\n    return \"pong\";\n  }\n}\n")))),(0,a.kt)("h2",{id:"accesing-brokerclient"},"Accesing BrokerClient"),(0,a.kt)("p",null,"Accessing ",(0,a.kt)("inlineCode",{parentName:"p"},"BrokerClient")," instances within any of your classes, is possible by specifying them in their constructors.\nKeep in mind that each of those instances will be ",(0,a.kt)("strong",{parentName:"p"},"unique"),"."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{6} title="mock.service.ts"',"{6}":!0,title:'"mock.service.ts"'},"import { BrokerClient } from 'electron-broker';\nimport { Injectable } from 'inversifyjs'\n\n@Injectable()\nexport default class MockService {\n  constructor(private brokerClient: BrokerClient) {}\n\n  public sendSomething(): void {\n    this.brokerClient.send('something', 'anything');\n  }\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{6} title="mock.service.js"',"{6}":!0,title:'"mock.service.js"'},"import { BrokerClient } from 'electron-broker';\nimport { Injectable, Inject } from 'inversifyjs'\n\n@Injectable()\nexport default class MockService {\n  constructor(@Inject(BrokerClient) private brokerClient) {}\n\n  public sendSomething() {\n    this.brokerClient.send('something', 'anything');\n  }\n}\n")))),(0,a.kt)("p",null,"To use the same instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"BrokerClient")," across all of your classes, simply bind the instance to the container,\nbefore calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"start()")," method of ",(0,a.kt)("inlineCode",{parentName:"p"},"Broker")," class."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{18} title="index.ts"',"{18}":!0,title:'"index.ts"'},"import 'reflect-metadata';\nimport { BrokerFactory } from 'electron-broker';\nimport { Container } from 'inversify';\nimport CatsController from './cats.controller.ts';\n\n// Token to identify our custom broker client\nexport CUSTOM_BROKER_CLIENT: symbol = Symbol.for('custom-broker-client');\n\nasync function createBroker() {\n  const container = new Container({ autoBindInjectable: true });\n\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n  });\n  \n  const customBrokerClient = broker.createClient();\n\n  container.bind(CUSTOM_BROKER_CLIENT).toConstantValue(customBrokerClient);\n\n  broker.start();\n}\n\ncreateBroker();\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{18} title="index.js"',"{18}":!0,title:'"index.js"'},"import 'reflect-metadata';\nimport { BrokerFactory } from 'electron-broker';\nimport { Container } from 'inversify';\nimport CatsController from './cats.controller.js';\n\n// Token to identify our custom broker client\nexport CUSTOM_BROKER_CLIENT = Symbol.for('custom-broker-client');\n\nasync function createBroker() {\n  const container = new Container({ autoBindInjectable: true });\n\n  broker = await BrokerFactory.createProcessBroker({\n    container: container,\n  });\n  \n  const customBrokerClient = broker.createClient();\n\n  container.bind(CUSTOM_BROKER_CLIENT).toConstantValue(customBrokerClient);\n\n  broker.start();\n}\n\ncreateBroker();\n")))),(0,a.kt)("p",null,"And inject it to any constructor by use of ",(0,a.kt)("inlineCode",{parentName:"p"},"Inject()")," decorator."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{7} title="mock.service.ts"',"{7}":!0,title:'"mock.service.ts"'},"import { BrokerClient } from 'electron-broker';\nimport { Injectable, Inject } from 'inversifyjs';\nimport { CUSTOM_BROKER_CLIENT } from './index.ts';\n\n@Injectable()\nexport default class MockService {\n  constructor(@Inject(CUSTOM_BROKER_CLIENT) private brokerClient: BrokerClient) {}\n\n  public sendSomething(): void {\n    this.brokerClient.send('something', 'anything');\n  }\n}\n"))),(0,a.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{7} title="mock.service.js"',"{7}":!0,title:'"mock.service.js"'},'import { BrokerClient } from "electron-broker";\nimport { Injectable, Inject } from "inversifyjs";\nimport { CUSTOM_BROKER_CLIENT } from "./index.js";\n\n@Injectable()\nexport default class MockService {\n  constructor(@Inject(CUSTOM_BROKER_CLIENT) private brokerClient) {}\n\n  public sendSomething() {\n    this.brokerClient.send(\'something\', \'anything\');\n  }\n}\n')))),(0,a.kt)("h2",{id:"custom-container"},"Custom container"),(0,a.kt)("p",null,"WIP"))}b.isMDXComponent=!0}}]);