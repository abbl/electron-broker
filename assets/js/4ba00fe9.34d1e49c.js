"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[176],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8215:function(e,t,r){r.d(t,{Z:function(){return a}});var n=r(7294);function a(e){var t=e.children,r=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},9877:function(e,t,r){r.d(t,{Z:function(){return u}});var n=r(7462),a=r(7294),o=r(2389),i=r(3725),l=r(6010),s="tabItem_LplD";function c(e){var t,r,o,c=e.lazy,u=e.block,p=e.defaultValue,d=e.values,m=e.groupId,f=e.className,k=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=d?d:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,i.lx)(b,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(t=null!=p?p:null==(r=k.find((function(e){return e.props.default})))?void 0:r.props.value)?t:null==(o=k[0])?void 0:o.props.value;if(null!==v&&!b.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,i.UB)(),g=h.tabGroupChoices,w=h.setTabGroupChoices,B=(0,a.useState)(v),C=B[0],x=B[1],N=[],T=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=g[m];null!=O&&O!==C&&b.some((function(e){return e.value===O}))&&x(O)}var j=function(e){var t=e.currentTarget,r=N.indexOf(t),n=b[r].value;n!==C&&(T(t),x(n),null!=m&&w(m,n))},E=function(e){var t,r=null;switch(e.key){case"ArrowRight":var n=N.indexOf(e.currentTarget)+1;r=N[n]||N[0];break;case"ArrowLeft":var a=N.indexOf(e.currentTarget)-1;r=N[a]||N[N.length-1]}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},f)},b.map((function(e){var t=e.value,r=e.label,o=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:function(e){return N.push(e)},onKeyDown:E,onFocus:j,onClick:j},o,{className:(0,l.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":C===t})}),null!=r?r:t)}))),c?(0,a.cloneElement)(k.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==C})}))))}function u(e){var t=(0,o.Z)();return a.createElement(c,(0,n.Z)({key:String(t)},e))}},7286:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=r(9877),l=r(8215),s=["components"],c={},u="Client process setup",p={unversionedId:"getting-started/client-process-setup",id:"getting-started/client-process-setup",title:"Client process setup",description:"Introduction",source:"@site/docs/getting-started/client-process-setup.mdx",sourceDirName:"getting-started",slug:"/getting-started/client-process-setup",permalink:"/electron-broker/docs/getting-started/client-process-setup",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/client-process-setup.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Broker process setup",permalink:"/electron-broker/docs/getting-started/broker-process-setup"},next:{title:"Controllers",permalink:"/electron-broker/docs/usage/controllers"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"BrowserWindow",id:"browserwindow",level:2},{value:"ChildProcess",id:"childprocess",level:2}],f={toc:m};function k(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"client-process-setup"},"Client process setup"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserWindow")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ChildProcess")," are considered as the clients by the library, as you're not able to use those processes to forward the messages to any other process than ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," one. Beside that aspect, ",(0,o.kt)("inlineCode",{parentName:"p"},"Broker")," object created on them uses the same API and features, as the one spawned on ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," process."),(0,o.kt)("h2",{id:"browserwindow"},"BrowserWindow"),(0,o.kt)("p",null,"This example uses ",(0,o.kt)("inlineCode",{parentName:"p"},"React")," as frontend framework, but rest of the code is universal, and you can apply it to any framework of your choice. Connecting the ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserWindow")," is simple and fast as you can see in following example:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{10} title="/src/renderer/index.tsx"',"{10}":!0,title:'"/src/renderer/index.tsx"'},"import 'reflect-metadata';\nimport { Broker, BrokerClient, BrokerFactory } from 'electron-broker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet broker: Broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createRendererBroker({\n    secure: true,\n  });\n\n  broker.start();\n}\n\nasync function init() {\n  await createBroker();\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n  );\n}\n\ninit();\n"))),(0,o.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{10} title="/src/renderer/index.jsx"',"{10}":!0,title:'"/src/renderer/index.jsx"'},"import 'reflect-metadata';\nimport { Broker, BrokerClient, BrokerFactory } from 'electron-broker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nlet broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createRendererBroker({\n    secure: true,\n  });\n\n  broker.start();\n}\n\nasync function init() {\n  await createBroker();\n\n  ReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n  );\n}\n\ninit();\n")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"secure")," property is used to indicate if your ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserWindow")," is using ",(0,o.kt)("inlineCode",{parentName:"p"},"preload.js")," file, but if you're not planning to use it, make sure to set this property to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", to make ",(0,o.kt)("inlineCode",{parentName:"p"},"Broker")," send and receive messages by directly accessing ",(0,o.kt)("inlineCode",{parentName:"p"},"ipcRenderer")," object."),(0,o.kt)("h2",{id:"childprocess"},"ChildProcess"),(0,o.kt)("p",null,"Connecting the ",(0,o.kt)("inlineCode",{parentName:"p"},"ChildProcess")," is pretty straightforward, let's look at the following example:"),(0,o.kt)(i.Z,{mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{7} title="/src/child/index.ts"',"{7}":!0,title:'"/src/child/index.ts"'},"import 'reflect-metadata';\nimport { Broker, BrokerClient, BrokerFactory } from 'electron-broker';\n\nlet broker: Broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker();\n\n  broker.start();\n}\n\nasync function init() {\n  await createBroker();\n}\n\ninit();\n"))),(0,o.kt)(l.Z,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'{7} title="/src/child/index.js"',"{7}":!0,title:'"/src/child/index.js"'},"import 'reflect-metadata';\nimport { Broker, BrokerClient, BrokerFactory } from 'electron-broker';\n\nlet broker;\n\nasync function createBroker() {\n  broker = await BrokerFactory.createProcessBroker();\n\n  broker.start();\n}\n\nasync function init() {\n  await createBroker();\n}\n\ninit();\n")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Broker")," on ",(0,o.kt)("inlineCode",{parentName:"p"},"ChildProcess")," does not require any further configuration, to start sending and receiving messages."))}k.isMDXComponent=!0}}]);